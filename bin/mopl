#!/usr/bin/env bash
# ------------------------------------------------------------------
#title           :mopl
#description     :Easily install Camunda Desktop Modeler plugins.
#author          :Niklas Kiefer
#usage           :mopl -hvnl
#bash-version    :Bash v4
# ------------------------------------------------------------------

VERSION=0.1.0
USAGE="Usage: mopl -hvnl"

# TODO(pinussilvestrus): make path configurable
PLUGINS_REPOSITORY='https://raw.githubusercontent.com/camunda/camunda-modeler-plugins/master/README.md'
URL_REGEX='(https:\/\/.*?)\)'
MD_LINK_REGEX='^\*(\s)*\[.*?\]\(((https:\/\/.*?)|.).*?\)'
PLUGINS_BLACKLIST=('https://docs.camunda.io/docs/components/modeler/desktop-modeler/plugins/')

set -Eeuo pipefail

function print_message {
  echo "[mopl] $1"
}

# TODO(pinussilvestrus): also offer local plugins, as https://github.com/camunda/camunda-modeler-plugins/tree/master/camunda-transaction-boundaries-plugin
function crawl_plugins {
  curl --silent "$PLUGINS_REPOSITORY" | grep -Eo "${MD_LINK_REGEX}"
}

function platform {
  os
  platform

  os=$(uname -s)
  case "$os" in
  Darwin)
    platform="mac"
    ;;
  Linux)
    platform="linux"
    ;;
  *)
    fail "Unknown OS: $os"
    ;;
  esac

  echo "$platform"
}

# TODO(pinussilvestrus): make cross platform
function get_plugins_path {
  platform_name="$(platform)"

  case "$platform_name" in
  mac)
    echo "${HOME}/Library/Application Support/camunda-modeler/resources/plugins"
    ;;
  linux)
    echo "${HOME}/.config/camunda-modeler/resources/plugins"
    ;;
  *)
    fail "Unknown platform: $platform_name"
    ;;
  esac
}

declare -A plugins
# populates <plugins> in the following structure:
# [key]: url
function transform_plugins {
  plugin_urls=($(echo "$1" | grep -Eo "${URL_REGEX}"))

  # remove last char ")"
  for (( i=0; i<${#plugin_urls[@]}; i++ )); do
    plugin_urls[$i]=${plugin_urls[$i]::-1} # remove last char
  done

  # remove blacklist items
  for del in "${PLUGINS_BLACKLIST[@]}"; do
    for i in "${!plugin_urls[@]}"; do
      if [[ ${plugin_urls[i]} = $del ]]; then
        unset 'plugin_urls[i]'
      fi
    done
  done

  # set to data struct
  for i in "${!plugin_urls[@]}"; do
    key=($(echo "${plugin_urls[$i]}" | grep -Eo '([^\/]+$)'))
    plugins[$key]=${plugin_urls[$i]}
  done
}

# TODO(pinussilvestrus): make keyboard accessible
function select_plugin {
  options=()

  for key in "${!plugins[@]}"
  do
    options+=("$key")
  done

  PS3='Select number: '
  select opt in "${options[@]}" 
  do
    if  [ -z "$opt" ]; then
      print_message "invalid option"
    else
      break
    fi
  done

  echo "${plugins[$opt]}"
}

# TODO(pinussilvestrus): make version configurable
function download_plugin {
  print_message "Downloading from ${opt}/tarball/master..."
  plugin_download_url="${1}/tarball/master"
  plugins_path=$(get_plugins_path)
  curl --silent -L "${plugin_download_url}" | tar zx -C "$plugins_path"
  print_message "Success!"
}

# get args
while getopts ":n:vhl" optname
  do
    case "$optname" in
      "v")
        print_message "Version $VERSION"
        exit 0;
        ;;
      "h")
        print_message "$USAGE"
        exit 0;
        ;;
      "l")
        print_message "Installed plugins:"
        plugins_path=$(get_plugins_path)
        ls --format=single-column "$plugins_path"
        exit 0;
        ;;
      "n")
        arg_plugin_name=$OPTARG
        ;;
      "?")
        print_message "Unknown option $OPTARG"
        exit 0;
        ;;
      ":")
        print_message "No argument value for option $OPTARG"
        exit 0;
        ;;
      *)
        print_message "Unknown error while processing options"
        exit 0;
        ;;
    esac
  done

# crawl plugins
print_message "Crawling plugins from camunda/camunda-modeler-plugins..."
raw_plugins=$(crawl_plugins)

# define plugins struct
transform_plugins "${raw_plugins}"

# a) install given plugin
if [[ -v arg_plugin_name ]]; then
  if [[ -v "plugins[$arg_plugin_name]" ]]; then
    opt="${plugins[$arg_plugin_name]}"
    download_plugin "$opt"
    exit 0;
  else
    print_message "Plugin <${arg_plugin_name}> not found."
  fi
fi

# b) prompt available plugins
print_message "Available plugins to install:"
opt=$(select_plugin)
download_plugin "$opt"